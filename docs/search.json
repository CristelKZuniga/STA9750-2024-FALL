[
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Mini-Project #01: Fiscal Characteristics of Major US Public Transit Systems. By Cristel Zuniga",
    "section": "",
    "text": "Welcome to Mini-Project. The following analysis will examine the U.S. public transit systems, using data from the National Transit Database (NTD), I explore different aspects of the transit systems, from ridership trends and vehicle usage mode, to financial performance indicators such as farebox recovery ratios. The purpose of this analysis is to reveal the most efficient systems, and provide a comprehensive view of how different modes—such as buses, rail, and vanpool—are utilized across the country.\nThe database analyzed in this site has been substracted from: - 2022 Fare Revenue - Monthly Ridership - 2022 Operating Expenses\nHere is the code to download the database:\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"2022_fare_revenue.xlsx\" in your project\n  # directory.\n  download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                destfile=\"2022_fare_revenue.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`, \n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`) |&gt;\n  group_by(`NTD ID`,       # Sum over different `TOS` for the same `Mode`\n           `Agency Name`,  # These are direct operated and sub-contracted \n           `Mode`) |&gt;      # of the same transit modality\n  # Not a big effect in most munis (significant DO\n  # tends to get rid of sub-contractors), but we'll sum\n  # to unify different passenger experiences\n  summarize(`Total Fares` = sum(`Total Fares`)) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'NTD ID', 'Agency Name'. You can override\nusing the `.groups` argument.\n\n# Next, expenses\nif(!file.exists(\"2022_expenses.csv\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"2022_expenses.csv\" in your project\n  # directory.\n  download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                destfile=\"2022_expenses.csv\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(`NTD ID`, \n         `Agency`,\n         `Total`, \n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nRows: 3744 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): Agency, City, State, NTD ID, Organization Type, Reporter Type, UZA...\ndbl  (2): Report Year, UACE Code\nnum (10): Primary UZA Population, Agency VOMS, Mode VOMS, Vehicle Operations...\nlgl  (7): Vehicle Operations Questionable, Vehicle Maintenance Questionable,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n`summarise()` has grouped output by 'NTD ID'. You can override using the `.groups` argument.\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n# Monthly Transit Numbers\nlibrary(tidyverse)\nif(!file.exists(\"ridership.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"ridership.xlsx\" in your project\n  # directory.\n  download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                destfile=\"ridership.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`, \n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'UZA Name', 'Mode', '3\nMode'. You can override using the `.groups` argument.\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nJoining with `by = join_by(`NTD ID`, Agency, `UZA Name`, Mode, `3 Mode`,\nmonth)`\n\nif(!require(\"DT\")) install.packages(\"DT\")\n\nLoading required package: DT\n\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()\n\n\n\n\nls()\n\n[1] \"EXPENSES\"   \"FARES\"      \"FINANCIALS\" \"MILES\"      \"TRIPS\"     \n[6] \"USAGE\"     \n\n\n\n\n##Task 1: Creating syntatic Names: USAGE|&gt;rename ( metro_area = \"UZA Name\") —\n##Task 2: Recoding the “Mode” column\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"YR\" ~\"Hybrid Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"MB\" ~\"Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"DT\" ~ \"Demand Response - Taxi\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"JT\" ~ \"Jitney\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"TB\" ~\"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    TRUE ~ \"Unknown\"\n  ))\nhead(USAGE)\n\n# A tibble: 6 × 8\n  `NTD ID` Agency      `UZA Name`        Mode  `3 Mode` month         UPT    VRM\n     &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt;    &lt;date&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n1        1 King County Seattle--Tacoma,… Dema… Bus      2002-01-01 135144 746158\n2        1 King County Seattle--Tacoma,… Dema… Bus      2002-02-01 127378 656324\n3        1 King County Seattle--Tacoma,… Dema… Bus      2002-03-01 136030 726578\n4        1 King County Seattle--Tacoma,… Dema… Bus      2002-04-01 142204 736975\n5        1 King County Seattle--Tacoma,… Dema… Bus      2002-05-01 144697 746158\n6        1 King County Seattle--Tacoma,… Dema… Bus      2002-06-01 131833 696633\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()\n\n\n\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\nlibrary(dplyr)\n\nUSAGE |&gt; \n  sample_n(1000) |&gt; \n  mutate(month = as.character(month)) |&gt; \n  select(-`NTD ID`, -starts_with(\"Mode\")) |&gt; \n  rename(\n    `Unlinked Passenger Trips` = UPT,\n    `Vehicle Revenue Miles` = VRM,\n     metro_area = 'UZA Name'\n  ) |&gt; \n  DT::datatable()\n\n\n\n\ncolnames(USAGE)\n\n[1] \"NTD ID\"   \"Agency\"   \"UZA Name\" \"Mode\"     \"3 Mode\"   \"month\"    \"UPT\"     \n[8] \"VRM\"     \n\n\n##Task 3: Answering Instructor Specified Questions with dplyr\n1. Question 1: What transit agency had the most total VRM in our data set?\n\nUSAGE |&gt; \n  group_by(Agency) |&gt; \n  summarize(total_agency_VRM = sum(VRM, na.rm = TRUE)) |&gt; \n  arrange(desc(total_agency_VRM)) |&gt;    # Sort by 'total_agency_VRM' in descending order\n  slice_head(n = 5)\n\n# A tibble: 5 × 2\n  Agency                                                   total_agency_VRM\n  &lt;chr&gt;                                                               &lt;dbl&gt;\n1 MTA New York City Transit                                     10832855350\n2 New Jersey Transit Corporation                                 5645525525\n3 Los Angeles County Metropolitan Transportation Authority       4354016659\n4 Washington Metropolitan Area Transit Authority                 2821950701\n5 Chicago Transit Authority                                      2806202144\n\n\nR1=The transit agency that has the largest total Vehicle Revenue Miles is the MTA New York City Transit, with a total of 10,832,855,350 miles.\n2. Question 2: What transit mode had the most total VRM in our data set?\n\nUSAGE |&gt; \n  group_by(`3 Mode`) |&gt; \n  summarize(total_agency_VRM = sum(VRM, na.rm = TRUE)) |&gt; \n  arrange(desc(total_agency_VRM)) |&gt;    # Sort by 'total_agency_VRM' in descending order\n  slice_head(n = 5)\n\n# A tibble: 3 × 2\n  `3 Mode` total_agency_VRM\n  &lt;chr&gt;               &lt;dbl&gt;\n1 Bus           73172836312\n2 Rail          23842376168\n3 Ferry            65589783\n\n\nR2 = The transportation mode with the largest Vehicle Revenue Miles in the dataset is the Bus, with a total of 73,172,836,312 miles.\n3. Question 3: How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\n\nUSAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\",\n         Mode == \"Heavy Rail\",\n         year (month) == 2024, \n         month(month) == 5) |&gt;\n  summarize(total_trips = sum(UPT, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  total_trips\n        &lt;dbl&gt;\n1   180458819\n\n\nR3= During the month of May 2024,the MTA New York City Transit completed 180,458,819 rides.\n\ntable(USAGE$Mode)\n\n\n             Aerial Tramway             Alaska Railroad \n                        133                         223 \n                        Bus           Bus Rapid Transit \n                     113187                        1703 \n                  Cable Car                Commuter Bus \n                        271                       10406 \n              Commuter Rail             Demand Response \n                       6035                      115701 \n                  Ferryboat                  Heavy Rail \n                       4412                        4017 \n                Hybrid Rail              Inclined Plane \n                        695                         811 \n                 Light Rail Monorail/Automated Guideway \n                       5841                         899 \n                    Publico              Streetcar Rail \n                        270                        2487 \n                 Trolleybus                     Vanpool \n                       1033                       12886 \n\n# Get the distinct modes of transportation for a specific agency\nUSAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\") |&gt;\n  distinct(`Mode`)\n\n# A tibble: 5 × 1\n  Mode             \n  &lt;chr&gt;            \n1 Commuter Bus     \n2 Demand Response  \n3 Heavy Rail       \n4 Bus              \n5 Bus Rapid Transit\n\nUSAGE |&gt;\n  filter(`3 Mode`== \"Heavy Rail\") |&gt;\n  distinct(Agency)\n\n# A tibble: 0 × 1\n# ℹ 1 variable: Agency &lt;chr&gt;\n\nUSAGE |&gt;\n  distinct(`3 Mode`)\n\n# A tibble: 3 × 1\n  `3 Mode`\n  &lt;chr&gt;   \n1 Bus     \n2 Ferry   \n3 Rail    \n\n\n5. Question 5: How much did NYC subway ridership fall between April 2019 and April 2020?\n\nridership_diff &lt;- USAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\", \n         Mode == \"Heavy Rail\", \n         month(month) == 4, \n         year(month) %in% c(2019, 2020)) |&gt;\n  summarize(\n    total_trips_2019 = sum(ifelse(year(month) == 2019, UPT, 0), na.rm = TRUE),\n    total_trips_2020 = sum(ifelse(year(month) == 2020, UPT, 0), na.rm = TRUE)\n  ) |&gt;\n  mutate(ridership_fall = total_trips_2019 - total_trips_2020)\n\nridership_diff\n\n# A tibble: 1 × 3\n  total_trips_2019 total_trips_2020 ridership_fall\n             &lt;dbl&gt;            &lt;dbl&gt;          &lt;dbl&gt;\n1        232223929         20254269      211969660\n\n\nR5= The difference in rides between April 2019 and April 2020 on the MTA NYC Subway is by 211,969,660 rides, and I think on o the main reasons was the global pandemic of Covid 19.\n\n\n\nA) What is the increase on rides from December 2019 vs. December 2022, by the Bus in all the agencies?\n\nridership_diff &lt;- USAGE |&gt;\n  filter(Mode == \"Bus\", \n         month(month) == 12, \n         year(month) %in% c(2020, 2022)) |&gt;\n  summarize(\n    total_trips_2020 = sum(ifelse(year(month) == 2020, UPT, 0), na.rm = TRUE),\n    total_trips_2022 = sum(ifelse(year(month) == 2022, UPT, 0), na.rm = TRUE)\n  ) |&gt;\n  mutate(ridership_fall = total_trips_2022 - total_trips_2020)\n\nridership_diff\n\n# A tibble: 1 × 3\n  total_trips_2020 total_trips_2022 ridership_fall\n             &lt;dbl&gt;            &lt;dbl&gt;          &lt;dbl&gt;\n1        161846424        236042280       74195856\n\n\na) R= The increase of rides in bus in all the US Transportation agencies increased from 161,846,424 in 2020 to 236,042,280 in 2022. Giving as a result a increase of 74,195,856 rides more.\nB) Name the top 5 transportation agencies based on the unlinked passenger trips (all modes included).\n\nUSAGE |&gt; \n  group_by(`Agency`) |&gt; \n  summarize(total_agency_UPT = sum(UPT, na.rm = TRUE)) |&gt; \n  arrange(desc(total_agency_UPT)) |&gt;\n  slice_head(n = 5)\n\n# A tibble: 5 × 2\n  Agency                                                   total_agency_UPT\n  &lt;chr&gt;                                                               &lt;dbl&gt;\n1 MTA New York City Transit                                     69101730780\n2 Chicago Transit Authority                                     10106154755\n3 Los Angeles County Metropolitan Transportation Authority       9193172939\n4 Washington Metropolitan Area Transit Authority                 7997911245\n5 Massachusetts Bay Transportation Authority                     7431129981\n\n\nB) R= The leader of the category with the highest rate of passenger trips in the history is the MTA NYC Transit.\nC) Compare if the top five agencies based on UTP is still the same as if you compare it with the VRM:\n\nUSAGE |&gt; \n  group_by(`Agency`) |&gt; \n  summarize(total_agency_VRM2 = sum(VRM, na.rm = TRUE)) |&gt; \n  arrange(desc(total_agency_VRM2)) |&gt;\n  slice_head(n = 5)\n\n# A tibble: 5 × 2\n  Agency                                                   total_agency_VRM2\n  &lt;chr&gt;                                                                &lt;dbl&gt;\n1 MTA New York City Transit                                      10832855350\n2 New Jersey Transit Corporation                                  5645525525\n3 Los Angeles County Metropolitan Transportation Authority        4354016659\n4 Washington Metropolitan Area Transit Authority                  2821950701\n5 Chicago Transit Authority                                       2806202144\n\n\nc) R= MTA NYC Transit remains in the first position, but in second place appear an agency that wasn’t in the top five by UPT, this Agency is New Jersey Transit Corporation.\n\n\n\n\nnames(USAGE)\n\n[1] \"NTD ID\"   \"Agency\"   \"UZA Name\" \"Mode\"     \"3 Mode\"   \"month\"    \"UPT\"     \n[8] \"VRM\"     \n\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  filter(year(month) == 2022) |&gt;\n  group_by(`NTD ID`, Agency, `UZA Name`, Mode) |&gt;\n  summarize(\n    UPT = sum(UPT, na.rm = TRUE),\n    VRM = sum(VRM, na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'UZA Name'. You can\noverride using the `.groups` argument.\n\nprint(USAGE_2022_ANNUAL)\n\n# A tibble: 1,141 × 6\n   `NTD ID` Agency                                `UZA Name` Mode     UPT    VRM\n      &lt;int&gt; &lt;chr&gt;                                 &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1        1 King County                           Seattle--… Bus   5.40e7 6.16e7\n 2        1 King County                           Seattle--… Dema… 6.63e5 1.29e7\n 3        1 King County                           Seattle--… Ferr… 4.00e5 5.12e4\n 4        1 King County                           Seattle--… Stre… 1.12e6 1.80e5\n 5        1 King County                           Seattle--… Trol… 9.58e6 2.64e6\n 6        1 King County                           Seattle--… Vanp… 7.03e5 4.41e6\n 7        2 Spokane Transit Authority             Spokane, … Bus   6.60e6 6.49e6\n 8        2 Spokane Transit Authority             Spokane, … Dema… 3.10e5 4.04e6\n 9        2 Spokane Transit Authority             Spokane, … Vanp… 9.06e4 9.06e5\n10        3 Pierce County Transportation Benefit… Seattle--… Bus   4.95e6 4.23e6\n# ℹ 1,131 more rows\n\ncolnames(USAGE)\n\n[1] \"NTD ID\"   \"Agency\"   \"UZA Name\" \"Mode\"     \"3 Mode\"   \"month\"    \"UPT\"     \n[8] \"VRM\"     \n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"DT\" ~ \"Demand Response - Taxi\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"JT\" ~ \"Jitney\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    TRUE ~ \"Unknown\"\n  ))\n\nhead(FINANCIALS)\n\n# A tibble: 6 × 5\n  `NTD ID` `Agency Name`                           Mode   `Total Fares` Expenses\n     &lt;dbl&gt; &lt;chr&gt;                                   &lt;chr&gt;          &lt;dbl&gt;    &lt;dbl&gt;\n1        1 King County Department of Metro Transit Commu…       5216912   0     \n2        1 King County Department of Metro Transit Deman…        832327   6.05e7\n3        1 King County Department of Metro Transit Ferry…       1715265   8.90e6\n4        1 King County Department of Metro Transit Light…      29386480   0     \n5        1 King County Department of Metro Transit Bus         56846337   6.72e8\n6        1 King County Department of Metro Transit Stree…        588495   1.25e7\n\ncolnames(USAGE_2022_ANNUAL)\n\n[1] \"NTD ID\"   \"Agency\"   \"UZA Name\" \"Mode\"     \"UPT\"      \"VRM\"     \n\ncolnames(FINANCIALS)\n\n[1] \"NTD ID\"      \"Agency Name\" \"Mode\"        \"Total Fares\" \"Expenses\"   \n\ndistinct(USAGE_2022_ANNUAL)\n\n# A tibble: 1,141 × 6\n   `NTD ID` Agency                                `UZA Name` Mode     UPT    VRM\n      &lt;int&gt; &lt;chr&gt;                                 &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1        1 King County                           Seattle--… Bus   5.40e7 6.16e7\n 2        1 King County                           Seattle--… Dema… 6.63e5 1.29e7\n 3        1 King County                           Seattle--… Ferr… 4.00e5 5.12e4\n 4        1 King County                           Seattle--… Stre… 1.12e6 1.80e5\n 5        1 King County                           Seattle--… Trol… 9.58e6 2.64e6\n 6        1 King County                           Seattle--… Vanp… 7.03e5 4.41e6\n 7        2 Spokane Transit Authority             Spokane, … Bus   6.60e6 6.49e6\n 8        2 Spokane Transit Authority             Spokane, … Dema… 3.10e5 4.04e6\n 9        2 Spokane Transit Authority             Spokane, … Vanp… 9.06e4 9.06e5\n10        3 Pierce County Transportation Benefit… Seattle--… Bus   4.95e6 4.23e6\n# ℹ 1,131 more rows\n\ndistinct(FINANCIALS)\n\n# A tibble: 1,173 × 5\n   `NTD ID` `Agency Name`                           Mode  `Total Fares` Expenses\n      &lt;dbl&gt; &lt;chr&gt;                                   &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n 1        1 King County Department of Metro Transit Comm…       5216912   0     \n 2        1 King County Department of Metro Transit Dema…        832327   6.05e7\n 3        1 King County Department of Metro Transit Ferr…       1715265   8.90e6\n 4        1 King County Department of Metro Transit Ligh…      29386480   0     \n 5        1 King County Department of Metro Transit Bus        56846337   6.72e8\n 6        1 King County Department of Metro Transit Stre…        588495   1.25e7\n 7        1 King County Department of Metro Transit Trol…      10123486   8.42e7\n 8        1 King County Department of Metro Transit Vanp…       5484481   8.91e6\n 9        2 Spokane Transit Authority               Dema…        531284   1.80e7\n10        2 Spokane Transit Authority               Bus         6135110   7.53e7\n# ℹ 1,163 more rows\n\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, \n                                  FINANCIALS, \n                                  join_by(`NTD ID`, Mode)) |&gt;\n  drop_na()\nUSAGE_AND_FINANCIALS\n\n# A tibble: 1,132 × 9\n   `NTD ID` Agency    `UZA Name` Mode     UPT    VRM `Agency Name` `Total Fares`\n      &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n 1        1 King Cou… Seattle--… Bus   5.40e7 6.16e7 King County …      56846337\n 2        1 King Cou… Seattle--… Dema… 6.63e5 1.29e7 King County …        832327\n 3        1 King Cou… Seattle--… Ferr… 4.00e5 5.12e4 King County …       1715265\n 4        1 King Cou… Seattle--… Stre… 1.12e6 1.80e5 King County …        588495\n 5        1 King Cou… Seattle--… Trol… 9.58e6 2.64e6 King County …      10123486\n 6        1 King Cou… Seattle--… Vanp… 7.03e5 4.41e6 King County …       5484481\n 7        2 Spokane … Spokane, … Bus   6.60e6 6.49e6 Spokane Tran…       6135110\n 8        2 Spokane … Spokane, … Dema… 3.10e5 4.04e6 Spokane Tran…        531284\n 9        2 Spokane … Spokane, … Vanp… 9.06e4 9.06e5 Spokane Tran…        247718\n10        3 Pierce C… Seattle--… Bus   4.95e6 4.23e6 Pierce Count…       4356831\n# ℹ 1,122 more rows\n# ℹ 1 more variable: Expenses &lt;dbl&gt;\n\ncolnames(USAGE_AND_FINANCIALS)\n\n[1] \"NTD ID\"      \"Agency\"      \"UZA Name\"    \"Mode\"        \"UPT\"        \n[6] \"VRM\"         \"Agency Name\" \"Total Fares\" \"Expenses\"   \n\n\n##Task 6: Farebox Recovery Among Major Systems\nUsing the USAGE_AND_FINANCIALS table, answer the following questions:\n1.Which transit system (agency and mode) had the most UPT in 2022?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  arrange(desc(total_UPT)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 3\n  Agency                    Mode        total_UPT\n  &lt;chr&gt;                     &lt;chr&gt;           &lt;dbl&gt;\n1 MTA New York City Transit Heavy Rail 1793073801\n\n\nR1. The transit system that had the most UPT in 2022 was the MTA New York City Transit, by the Heavy Rail mode, with a total of 1,793,073,801 trips.\n2.Which transit system (agency and mode) had the highest farebox recovery,defined as the highest ratio of Total Fares to Expenses?\n\nUSAGE_AND_FINANCIALS |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_fares = sum(`Total Fares`, na.rm = TRUE),\n    total_expenses = sum(Expenses, na.rm = TRUE)\n  ) |&gt;\n  mutate(farebox_recovery_ratio = total_fares / total_expenses) |&gt;\n  ungroup() |&gt;\n  arrange(desc(farebox_recovery_ratio)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                 Mode  total_fares total_expenses farebox_recovery_ratio\n  &lt;chr&gt;                  &lt;chr&gt;       &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n1 Transit Authority of … Vanp…       97300          40801                   2.38\n\n\nR2 = The Transit System with the highest recovery ratio is The Transit Authority of Central Kentuchy, by Vanpool #with a recovery Ratio of $2.38 usd.\n3.Which transit system (agency and mode) has the lowest expenses per UPT?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_expenses = sum(Expenses, na.rm = TRUE),\n    total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  filter(total_UPT &gt;= 400000) |&gt;\n    mutate (expenses_per_UPT = total_expenses/total_UPT)|&gt;\n  ungroup() |&gt;\n  arrange(expenses_per_UPT) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                         Mode  total_expenses total_UPT expenses_per_UPT\n  &lt;chr&gt;                          &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;            &lt;dbl&gt;\n1 North Carolina State Universi… Bus          2727412   2313091             1.18\n\n\nR3. North Carolina State University is the agency with the lowest expenses per UPT, on the bus mode, the expenses per UPT is only $1.18usdd.\n4.Which transit system (agency and mode) has the highest total fares per UPT?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_fares1 = sum(`Total Fares`, na.rm = TRUE),\n    total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  \n  mutate (total_fares_per_UPT = total_fares1/total_UPT)|&gt;\n  ungroup() |&gt;\n  arrange(desc(total_fares_per_UPT)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                Mode          total_fares1 total_UPT total_fares_per_UPT\n  &lt;chr&gt;                 &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;               &lt;dbl&gt;\n1 Altoona Metro Transit Demand Respo…        17163        26                660.\n\n\nR4. The highest total fares per UPT is the Agency “Altoona Metro Transit” with the modality #of “Demand Response”, the total fares per UPT is $660 USD.\n5.Which transit system (agency and mode) has the lowest expenses per VRM?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_expenses = sum(`Expenses`, na.rm = TRUE),\n    total_VRM = sum(VRM, na.rm = TRUE),\n    total_UPT= sum(UPT, na.rm=TRUE)) |&gt;\n  filter(total_UPT &gt;= 400000) |&gt;\n  mutate (total_expenses_per_VRM = total_expenses/total_VRM)|&gt;\n  ungroup() |&gt;\n  arrange((total_expenses_per_VRM)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 6\n  Agency         Mode  total_expenses total_VRM total_UPT total_expenses_per_VRM\n  &lt;chr&gt;          &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;                  &lt;dbl&gt;\n1 Metropolitan … Vanp…        5491767  12341055   1024804                  0.445\n\n\nR5. Metropolitan Transportation Comission, Vanpool mode, is the transit system with the lowest expenses per VRM, with only $0.445USD\n6.Which transit system (agency and mode) has the highest total fares per VRM?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_fares1 = sum(`Total Fares`, na.rm = TRUE),\n    total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n\n  mutate (total_fares_per_VRM = total_fares1/total_VRM)|&gt;\n  ungroup() |&gt;\n  arrange(desc(total_fares_per_VRM)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                        Mode  total_fares1 total_VRM total_fares_per_VRM\n  &lt;chr&gt;                         &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;               &lt;dbl&gt;\n1 Chicago Water Taxi (Wendella) Ferr…       142473       600                237.\n\n\nR6. The highest total fares per VRM on transit agencies in the US is the Ferryboat from Chicago Water Taxi (Wendella), #the total fare per VRM is $237USD.\n`colnames(USAGE_AND_FINANCIALS)"
  },
  {
    "objectID": "mp01.html#development-and-tasks",
    "href": "mp01.html#development-and-tasks",
    "title": "Mini-Project #01: Fiscal Characteristics of Major US Public Transit Systems. By Cristel Zuniga",
    "section": "",
    "text": "##Task 1: Creating syntatic Names: USAGE|&gt;rename ( metro_area = \"UZA Name\") —\n##Task 2: Recoding the “Mode” column\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"YR\" ~\"Hybrid Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"MB\" ~\"Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"DT\" ~ \"Demand Response - Taxi\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"JT\" ~ \"Jitney\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"TB\" ~\"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    TRUE ~ \"Unknown\"\n  ))\nhead(USAGE)\n\n# A tibble: 6 × 8\n  `NTD ID` Agency      `UZA Name`        Mode  `3 Mode` month         UPT    VRM\n     &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt;    &lt;date&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n1        1 King County Seattle--Tacoma,… Dema… Bus      2002-01-01 135144 746158\n2        1 King County Seattle--Tacoma,… Dema… Bus      2002-02-01 127378 656324\n3        1 King County Seattle--Tacoma,… Dema… Bus      2002-03-01 136030 726578\n4        1 King County Seattle--Tacoma,… Dema… Bus      2002-04-01 142204 736975\n5        1 King County Seattle--Tacoma,… Dema… Bus      2002-05-01 144697 746158\n6        1 King County Seattle--Tacoma,… Dema… Bus      2002-06-01 131833 696633\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()\n\n\n\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\nlibrary(dplyr)\n\nUSAGE |&gt; \n  sample_n(1000) |&gt; \n  mutate(month = as.character(month)) |&gt; \n  select(-`NTD ID`, -starts_with(\"Mode\")) |&gt; \n  rename(\n    `Unlinked Passenger Trips` = UPT,\n    `Vehicle Revenue Miles` = VRM,\n     metro_area = 'UZA Name'\n  ) |&gt; \n  DT::datatable()\n\n\n\n\ncolnames(USAGE)\n\n[1] \"NTD ID\"   \"Agency\"   \"UZA Name\" \"Mode\"     \"3 Mode\"   \"month\"    \"UPT\"     \n[8] \"VRM\"     \n\n\n##Task 3: Answering Instructor Specified Questions with dplyr\n1. Question 1: What transit agency had the most total VRM in our data set?\n\nUSAGE |&gt; \n  group_by(Agency) |&gt; \n  summarize(total_agency_VRM = sum(VRM, na.rm = TRUE)) |&gt; \n  arrange(desc(total_agency_VRM)) |&gt;    # Sort by 'total_agency_VRM' in descending order\n  slice_head(n = 5)\n\n# A tibble: 5 × 2\n  Agency                                                   total_agency_VRM\n  &lt;chr&gt;                                                               &lt;dbl&gt;\n1 MTA New York City Transit                                     10832855350\n2 New Jersey Transit Corporation                                 5645525525\n3 Los Angeles County Metropolitan Transportation Authority       4354016659\n4 Washington Metropolitan Area Transit Authority                 2821950701\n5 Chicago Transit Authority                                      2806202144\n\n\nR1=The transit agency that has the largest total Vehicle Revenue Miles is the MTA New York City Transit, with a total of 10,832,855,350 miles.\n2. Question 2: What transit mode had the most total VRM in our data set?\n\nUSAGE |&gt; \n  group_by(`3 Mode`) |&gt; \n  summarize(total_agency_VRM = sum(VRM, na.rm = TRUE)) |&gt; \n  arrange(desc(total_agency_VRM)) |&gt;    # Sort by 'total_agency_VRM' in descending order\n  slice_head(n = 5)\n\n# A tibble: 3 × 2\n  `3 Mode` total_agency_VRM\n  &lt;chr&gt;               &lt;dbl&gt;\n1 Bus           73172836312\n2 Rail          23842376168\n3 Ferry            65589783\n\n\nR2 = The transportation mode with the largest Vehicle Revenue Miles in the dataset is the Bus, with a total of 73,172,836,312 miles.\n3. Question 3: How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\n\nUSAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\",\n         Mode == \"Heavy Rail\",\n         year (month) == 2024, \n         month(month) == 5) |&gt;\n  summarize(total_trips = sum(UPT, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  total_trips\n        &lt;dbl&gt;\n1   180458819\n\n\nR3= During the month of May 2024,the MTA New York City Transit completed 180,458,819 rides.\n\ntable(USAGE$Mode)\n\n\n             Aerial Tramway             Alaska Railroad \n                        133                         223 \n                        Bus           Bus Rapid Transit \n                     113187                        1703 \n                  Cable Car                Commuter Bus \n                        271                       10406 \n              Commuter Rail             Demand Response \n                       6035                      115701 \n                  Ferryboat                  Heavy Rail \n                       4412                        4017 \n                Hybrid Rail              Inclined Plane \n                        695                         811 \n                 Light Rail Monorail/Automated Guideway \n                       5841                         899 \n                    Publico              Streetcar Rail \n                        270                        2487 \n                 Trolleybus                     Vanpool \n                       1033                       12886 \n\n# Get the distinct modes of transportation for a specific agency\nUSAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\") |&gt;\n  distinct(`Mode`)\n\n# A tibble: 5 × 1\n  Mode             \n  &lt;chr&gt;            \n1 Commuter Bus     \n2 Demand Response  \n3 Heavy Rail       \n4 Bus              \n5 Bus Rapid Transit\n\nUSAGE |&gt;\n  filter(`3 Mode`== \"Heavy Rail\") |&gt;\n  distinct(Agency)\n\n# A tibble: 0 × 1\n# ℹ 1 variable: Agency &lt;chr&gt;\n\nUSAGE |&gt;\n  distinct(`3 Mode`)\n\n# A tibble: 3 × 1\n  `3 Mode`\n  &lt;chr&gt;   \n1 Bus     \n2 Ferry   \n3 Rail    \n\n\n5. Question 5: How much did NYC subway ridership fall between April 2019 and April 2020?\n\nridership_diff &lt;- USAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\", \n         Mode == \"Heavy Rail\", \n         month(month) == 4, \n         year(month) %in% c(2019, 2020)) |&gt;\n  summarize(\n    total_trips_2019 = sum(ifelse(year(month) == 2019, UPT, 0), na.rm = TRUE),\n    total_trips_2020 = sum(ifelse(year(month) == 2020, UPT, 0), na.rm = TRUE)\n  ) |&gt;\n  mutate(ridership_fall = total_trips_2019 - total_trips_2020)\n\nridership_diff\n\n# A tibble: 1 × 3\n  total_trips_2019 total_trips_2020 ridership_fall\n             &lt;dbl&gt;            &lt;dbl&gt;          &lt;dbl&gt;\n1        232223929         20254269      211969660\n\n\nR5= The difference in rides between April 2019 and April 2020 on the MTA NYC Subway is by 211,969,660 rides, and I think on o the main reasons was the global pandemic of Covid 19."
  },
  {
    "objectID": "mp01.html#task-4-explore-and-analyze-find-three-more-interesting-transit-facts-in-this-data-other-than-those-above.",
    "href": "mp01.html#task-4-explore-and-analyze-find-three-more-interesting-transit-facts-in-this-data-other-than-those-above.",
    "title": "Mini-Project #01: Fiscal Characteristics of Major US Public Transit Systems. By Cristel Zuniga",
    "section": "",
    "text": "A) What is the increase on rides from December 2019 vs. December 2022, by the Bus in all the agencies?\n\nridership_diff &lt;- USAGE |&gt;\n  filter(Mode == \"Bus\", \n         month(month) == 12, \n         year(month) %in% c(2020, 2022)) |&gt;\n  summarize(\n    total_trips_2020 = sum(ifelse(year(month) == 2020, UPT, 0), na.rm = TRUE),\n    total_trips_2022 = sum(ifelse(year(month) == 2022, UPT, 0), na.rm = TRUE)\n  ) |&gt;\n  mutate(ridership_fall = total_trips_2022 - total_trips_2020)\n\nridership_diff\n\n# A tibble: 1 × 3\n  total_trips_2020 total_trips_2022 ridership_fall\n             &lt;dbl&gt;            &lt;dbl&gt;          &lt;dbl&gt;\n1        161846424        236042280       74195856\n\n\na) R= The increase of rides in bus in all the US Transportation agencies increased from 161,846,424 in 2020 to 236,042,280 in 2022. Giving as a result a increase of 74,195,856 rides more.\nB) Name the top 5 transportation agencies based on the unlinked passenger trips (all modes included).\n\nUSAGE |&gt; \n  group_by(`Agency`) |&gt; \n  summarize(total_agency_UPT = sum(UPT, na.rm = TRUE)) |&gt; \n  arrange(desc(total_agency_UPT)) |&gt;\n  slice_head(n = 5)\n\n# A tibble: 5 × 2\n  Agency                                                   total_agency_UPT\n  &lt;chr&gt;                                                               &lt;dbl&gt;\n1 MTA New York City Transit                                     69101730780\n2 Chicago Transit Authority                                     10106154755\n3 Los Angeles County Metropolitan Transportation Authority       9193172939\n4 Washington Metropolitan Area Transit Authority                 7997911245\n5 Massachusetts Bay Transportation Authority                     7431129981\n\n\nB) R= The leader of the category with the highest rate of passenger trips in the history is the MTA NYC Transit.\nC) Compare if the top five agencies based on UTP is still the same as if you compare it with the VRM:\n\nUSAGE |&gt; \n  group_by(`Agency`) |&gt; \n  summarize(total_agency_VRM2 = sum(VRM, na.rm = TRUE)) |&gt; \n  arrange(desc(total_agency_VRM2)) |&gt;\n  slice_head(n = 5)\n\n# A tibble: 5 × 2\n  Agency                                                   total_agency_VRM2\n  &lt;chr&gt;                                                                &lt;dbl&gt;\n1 MTA New York City Transit                                      10832855350\n2 New Jersey Transit Corporation                                  5645525525\n3 Los Angeles County Metropolitan Transportation Authority        4354016659\n4 Washington Metropolitan Area Transit Authority                  2821950701\n5 Chicago Transit Authority                                       2806202144\n\n\nc) R= MTA NYC Transit remains in the first position, but in second place appear an agency that wasn’t in the top five by UPT, this Agency is New Jersey Transit Corporation."
  },
  {
    "objectID": "mp01.html#task-5-table-summarization",
    "href": "mp01.html#task-5-table-summarization",
    "title": "Mini-Project #01: Fiscal Characteristics of Major US Public Transit Systems. By Cristel Zuniga",
    "section": "",
    "text": "names(USAGE)\n\n[1] \"NTD ID\"   \"Agency\"   \"UZA Name\" \"Mode\"     \"3 Mode\"   \"month\"    \"UPT\"     \n[8] \"VRM\"     \n\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  filter(year(month) == 2022) |&gt;\n  group_by(`NTD ID`, Agency, `UZA Name`, Mode) |&gt;\n  summarize(\n    UPT = sum(UPT, na.rm = TRUE),\n    VRM = sum(VRM, na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'UZA Name'. You can\noverride using the `.groups` argument.\n\nprint(USAGE_2022_ANNUAL)\n\n# A tibble: 1,141 × 6\n   `NTD ID` Agency                                `UZA Name` Mode     UPT    VRM\n      &lt;int&gt; &lt;chr&gt;                                 &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1        1 King County                           Seattle--… Bus   5.40e7 6.16e7\n 2        1 King County                           Seattle--… Dema… 6.63e5 1.29e7\n 3        1 King County                           Seattle--… Ferr… 4.00e5 5.12e4\n 4        1 King County                           Seattle--… Stre… 1.12e6 1.80e5\n 5        1 King County                           Seattle--… Trol… 9.58e6 2.64e6\n 6        1 King County                           Seattle--… Vanp… 7.03e5 4.41e6\n 7        2 Spokane Transit Authority             Spokane, … Bus   6.60e6 6.49e6\n 8        2 Spokane Transit Authority             Spokane, … Dema… 3.10e5 4.04e6\n 9        2 Spokane Transit Authority             Spokane, … Vanp… 9.06e4 9.06e5\n10        3 Pierce County Transportation Benefit… Seattle--… Bus   4.95e6 4.23e6\n# ℹ 1,131 more rows\n\ncolnames(USAGE)\n\n[1] \"NTD ID\"   \"Agency\"   \"UZA Name\" \"Mode\"     \"3 Mode\"   \"month\"    \"UPT\"     \n[8] \"VRM\"     \n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"DT\" ~ \"Demand Response - Taxi\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"JT\" ~ \"Jitney\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    TRUE ~ \"Unknown\"\n  ))\n\nhead(FINANCIALS)\n\n# A tibble: 6 × 5\n  `NTD ID` `Agency Name`                           Mode   `Total Fares` Expenses\n     &lt;dbl&gt; &lt;chr&gt;                                   &lt;chr&gt;          &lt;dbl&gt;    &lt;dbl&gt;\n1        1 King County Department of Metro Transit Commu…       5216912   0     \n2        1 King County Department of Metro Transit Deman…        832327   6.05e7\n3        1 King County Department of Metro Transit Ferry…       1715265   8.90e6\n4        1 King County Department of Metro Transit Light…      29386480   0     \n5        1 King County Department of Metro Transit Bus         56846337   6.72e8\n6        1 King County Department of Metro Transit Stree…        588495   1.25e7\n\ncolnames(USAGE_2022_ANNUAL)\n\n[1] \"NTD ID\"   \"Agency\"   \"UZA Name\" \"Mode\"     \"UPT\"      \"VRM\"     \n\ncolnames(FINANCIALS)\n\n[1] \"NTD ID\"      \"Agency Name\" \"Mode\"        \"Total Fares\" \"Expenses\"   \n\ndistinct(USAGE_2022_ANNUAL)\n\n# A tibble: 1,141 × 6\n   `NTD ID` Agency                                `UZA Name` Mode     UPT    VRM\n      &lt;int&gt; &lt;chr&gt;                                 &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1        1 King County                           Seattle--… Bus   5.40e7 6.16e7\n 2        1 King County                           Seattle--… Dema… 6.63e5 1.29e7\n 3        1 King County                           Seattle--… Ferr… 4.00e5 5.12e4\n 4        1 King County                           Seattle--… Stre… 1.12e6 1.80e5\n 5        1 King County                           Seattle--… Trol… 9.58e6 2.64e6\n 6        1 King County                           Seattle--… Vanp… 7.03e5 4.41e6\n 7        2 Spokane Transit Authority             Spokane, … Bus   6.60e6 6.49e6\n 8        2 Spokane Transit Authority             Spokane, … Dema… 3.10e5 4.04e6\n 9        2 Spokane Transit Authority             Spokane, … Vanp… 9.06e4 9.06e5\n10        3 Pierce County Transportation Benefit… Seattle--… Bus   4.95e6 4.23e6\n# ℹ 1,131 more rows\n\ndistinct(FINANCIALS)\n\n# A tibble: 1,173 × 5\n   `NTD ID` `Agency Name`                           Mode  `Total Fares` Expenses\n      &lt;dbl&gt; &lt;chr&gt;                                   &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n 1        1 King County Department of Metro Transit Comm…       5216912   0     \n 2        1 King County Department of Metro Transit Dema…        832327   6.05e7\n 3        1 King County Department of Metro Transit Ferr…       1715265   8.90e6\n 4        1 King County Department of Metro Transit Ligh…      29386480   0     \n 5        1 King County Department of Metro Transit Bus        56846337   6.72e8\n 6        1 King County Department of Metro Transit Stre…        588495   1.25e7\n 7        1 King County Department of Metro Transit Trol…      10123486   8.42e7\n 8        1 King County Department of Metro Transit Vanp…       5484481   8.91e6\n 9        2 Spokane Transit Authority               Dema…        531284   1.80e7\n10        2 Spokane Transit Authority               Bus         6135110   7.53e7\n# ℹ 1,163 more rows\n\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, \n                                  FINANCIALS, \n                                  join_by(`NTD ID`, Mode)) |&gt;\n  drop_na()\nUSAGE_AND_FINANCIALS\n\n# A tibble: 1,132 × 9\n   `NTD ID` Agency    `UZA Name` Mode     UPT    VRM `Agency Name` `Total Fares`\n      &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n 1        1 King Cou… Seattle--… Bus   5.40e7 6.16e7 King County …      56846337\n 2        1 King Cou… Seattle--… Dema… 6.63e5 1.29e7 King County …        832327\n 3        1 King Cou… Seattle--… Ferr… 4.00e5 5.12e4 King County …       1715265\n 4        1 King Cou… Seattle--… Stre… 1.12e6 1.80e5 King County …        588495\n 5        1 King Cou… Seattle--… Trol… 9.58e6 2.64e6 King County …      10123486\n 6        1 King Cou… Seattle--… Vanp… 7.03e5 4.41e6 King County …       5484481\n 7        2 Spokane … Spokane, … Bus   6.60e6 6.49e6 Spokane Tran…       6135110\n 8        2 Spokane … Spokane, … Dema… 3.10e5 4.04e6 Spokane Tran…        531284\n 9        2 Spokane … Spokane, … Vanp… 9.06e4 9.06e5 Spokane Tran…        247718\n10        3 Pierce C… Seattle--… Bus   4.95e6 4.23e6 Pierce Count…       4356831\n# ℹ 1,122 more rows\n# ℹ 1 more variable: Expenses &lt;dbl&gt;\n\ncolnames(USAGE_AND_FINANCIALS)\n\n[1] \"NTD ID\"      \"Agency\"      \"UZA Name\"    \"Mode\"        \"UPT\"        \n[6] \"VRM\"         \"Agency Name\" \"Total Fares\" \"Expenses\"   \n\n\n##Task 6: Farebox Recovery Among Major Systems\nUsing the USAGE_AND_FINANCIALS table, answer the following questions:\n1.Which transit system (agency and mode) had the most UPT in 2022?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  arrange(desc(total_UPT)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 3\n  Agency                    Mode        total_UPT\n  &lt;chr&gt;                     &lt;chr&gt;           &lt;dbl&gt;\n1 MTA New York City Transit Heavy Rail 1793073801\n\n\nR1. The transit system that had the most UPT in 2022 was the MTA New York City Transit, by the Heavy Rail mode, with a total of 1,793,073,801 trips.\n2.Which transit system (agency and mode) had the highest farebox recovery,defined as the highest ratio of Total Fares to Expenses?\n\nUSAGE_AND_FINANCIALS |&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_fares = sum(`Total Fares`, na.rm = TRUE),\n    total_expenses = sum(Expenses, na.rm = TRUE)\n  ) |&gt;\n  mutate(farebox_recovery_ratio = total_fares / total_expenses) |&gt;\n  ungroup() |&gt;\n  arrange(desc(farebox_recovery_ratio)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                 Mode  total_fares total_expenses farebox_recovery_ratio\n  &lt;chr&gt;                  &lt;chr&gt;       &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n1 Transit Authority of … Vanp…       97300          40801                   2.38\n\n\nR2 = The Transit System with the highest recovery ratio is The Transit Authority of Central Kentuchy, by Vanpool #with a recovery Ratio of $2.38 usd.\n3.Which transit system (agency and mode) has the lowest expenses per UPT?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_expenses = sum(Expenses, na.rm = TRUE),\n    total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  filter(total_UPT &gt;= 400000) |&gt;\n    mutate (expenses_per_UPT = total_expenses/total_UPT)|&gt;\n  ungroup() |&gt;\n  arrange(expenses_per_UPT) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                         Mode  total_expenses total_UPT expenses_per_UPT\n  &lt;chr&gt;                          &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;            &lt;dbl&gt;\n1 North Carolina State Universi… Bus          2727412   2313091             1.18\n\n\nR3. North Carolina State University is the agency with the lowest expenses per UPT, on the bus mode, the expenses per UPT is only $1.18usdd.\n4.Which transit system (agency and mode) has the highest total fares per UPT?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_fares1 = sum(`Total Fares`, na.rm = TRUE),\n    total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  \n  mutate (total_fares_per_UPT = total_fares1/total_UPT)|&gt;\n  ungroup() |&gt;\n  arrange(desc(total_fares_per_UPT)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                Mode          total_fares1 total_UPT total_fares_per_UPT\n  &lt;chr&gt;                 &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;               &lt;dbl&gt;\n1 Altoona Metro Transit Demand Respo…        17163        26                660.\n\n\nR4. The highest total fares per UPT is the Agency “Altoona Metro Transit” with the modality #of “Demand Response”, the total fares per UPT is $660 USD.\n5.Which transit system (agency and mode) has the lowest expenses per VRM?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_expenses = sum(`Expenses`, na.rm = TRUE),\n    total_VRM = sum(VRM, na.rm = TRUE),\n    total_UPT= sum(UPT, na.rm=TRUE)) |&gt;\n  filter(total_UPT &gt;= 400000) |&gt;\n  mutate (total_expenses_per_VRM = total_expenses/total_VRM)|&gt;\n  ungroup() |&gt;\n  arrange((total_expenses_per_VRM)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 6\n  Agency         Mode  total_expenses total_VRM total_UPT total_expenses_per_VRM\n  &lt;chr&gt;          &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;                  &lt;dbl&gt;\n1 Metropolitan … Vanp…        5491767  12341055   1024804                  0.445\n\n\nR5. Metropolitan Transportation Comission, Vanpool mode, is the transit system with the lowest expenses per VRM, with only $0.445USD\n6.Which transit system (agency and mode) has the highest total fares per VRM?\n\nUSAGE_AND_FINANCIALS|&gt;\n  group_by(Agency, Mode) |&gt;\n  summarize(\n    total_fares1 = sum(`Total Fares`, na.rm = TRUE),\n    total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n\n  mutate (total_fares_per_VRM = total_fares1/total_VRM)|&gt;\n  ungroup() |&gt;\n  arrange(desc(total_fares_per_VRM)) |&gt;\n  slice_head(n = 1)\n\n`summarise()` has grouped output by 'Agency'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 5\n  Agency                        Mode  total_fares1 total_VRM total_fares_per_VRM\n  &lt;chr&gt;                         &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;               &lt;dbl&gt;\n1 Chicago Water Taxi (Wendella) Ferr…       142473       600                237.\n\n\nR6. The highest total fares per VRM on transit agencies in the US is the Ferryboat from Chicago Water Taxi (Wendella), #the total fare per VRM is $237USD.\n`colnames(USAGE_AND_FINANCIALS)"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "Mini project 02",
    "section": "",
    "text": "Welcome to Mini-Project 02. This project aims to recommend successful movies to recreate by analyzing various data sources. We will look at movie ratings, genres, and the involvement of key actors and directors to understand what makes a film successful.\nBy calculating a success metric based on ratings and audience engagement, we can filter for films that have performed well. The goal is to create a data-driven list of films that have the potential for a successful recreation, ensuring they resonate with audiences."
  },
  {
    "objectID": "mp02.html#task-1-column-type-correction",
    "href": "mp02.html#task-1-column-type-correction",
    "title": "Mini project 02",
    "section": "Task 1: Column Type Correction",
    "text": "Task 1: Column Type Correction\nCorrect the column types of the TITLE tables using a combination of mutate and the coercion functions as.numeric and as.logical.\n\nhead (TITLE_BASICS)\n\n     tconst titleType           primaryTitle          originalTitle isAdult\n1 tt0000001     short             Carmencita             Carmencita       0\n2 tt0000002     short Le clown et ses chiens Le clown et ses chiens       0\n3 tt0000003     short           Poor Pierrot         Pauvre Pierrot       0\n4 tt0000004     short            Un bon bock            Un bon bock       0\n5 tt0000005     short       Blacksmith Scene       Blacksmith Scene       0\n6 tt0000006     short      Chinese Opium Den      Chinese Opium Den       0\n  startYear endYear runtimeMinutes                   genres\n1      1894     \\\\N              1        Documentary,Short\n2      1892     \\\\N              5          Animation,Short\n3      1892     \\\\N              5 Animation,Comedy,Romance\n4      1892     \\\\N             12          Animation,Short\n5      1893     \\\\N              1             Comedy,Short\n6      1894     \\\\N              1                    Short\n\n\n\nGetting data types for each data set, to evaulate which information needs to be updated with the coercion functions.\n\n\nstr (TITLE_BASICS) \n\n'data.frame':   11174655 obs. of  9 variables:\n $ tconst        : chr  \"tt0000001\" \"tt0000002\" \"tt0000003\" \"tt0000004\" ...\n $ titleType     : chr  \"short\" \"short\" \"short\" \"short\" ...\n $ primaryTitle  : chr  \"Carmencita\" \"Le clown et ses chiens\" \"Poor Pierrot\" \"Un bon bock\" ...\n $ originalTitle : chr  \"Carmencita\" \"Le clown et ses chiens\" \"Pauvre Pierrot\" \"Un bon bock\" ...\n $ isAdult       : num  0 0 0 0 0 0 0 0 0 0 ...\n $ startYear     : chr  \"1894\" \"1892\" \"1892\" \"1892\" ...\n $ endYear       : chr  \"\\\\N\" \"\\\\N\" \"\\\\N\" \"\\\\N\" ...\n $ runtimeMinutes: chr  \"1\" \"5\" \"5\" \"12\" ...\n $ genres        : chr  \"Documentary,Short\" \"Animation,Short\" \"Animation,Comedy,Romance\" \"Animation,Short\" ...\n\nstr (TITLE_EPISODES)\n\n'data.frame':   8579083 obs. of  4 variables:\n $ tconst       : chr  \"tt0031458\" \"tt0041951\" \"tt0042816\" \"tt0042889\" ...\n $ parentTconst : chr  \"tt32857063\" \"tt0041038\" \"tt0989125\" \"tt0989125\" ...\n $ seasonNumber : chr  \"\\\\N\" \"1\" \"1\" \"\\\\N\" ...\n $ episodeNumber: chr  \"\\\\N\" \"9\" \"17\" \"\\\\N\" ...\n\nstr (TITLE_RATINGS)\n\n'data.frame':   374436 obs. of  3 variables:\n $ tconst       : chr  \"tt0000001\" \"tt0000002\" \"tt0000003\" \"tt0000004\" ...\n $ averageRating: num  5.7 5.6 6.5 5.4 6.2 5 5.4 5.4 5.4 6.8 ...\n $ numVotes     : num  2096 283 2104 183 2841 ...\n\nstr (TITLE_CREW)\n\n'data.frame':   10514405 obs. of  3 variables:\n $ tconst   : chr  \"tt0000001\" \"tt0000002\" \"tt0000003\" \"tt0000004\" ...\n $ directors: chr  \"nm0005690\" \"nm0721526\" \"nm0721526\" \"nm0721526\" ...\n $ writers  : chr  \"\\\\N\" \"\\\\N\" \"\\\\N\" \"\\\\N\" ...\n\nstr (TITLE_PRINCIPALS)\n\n'data.frame':   86651930 obs. of  6 variables:\n $ tconst    : chr  \"tt0000001\" \"tt0000001\" \"tt0000001\" \"tt0000001\" ...\n $ ordering  : num  1 2 3 4 1 2 1 2 3 4 ...\n $ nconst    : chr  \"nm1588970\" \"nm0005690\" \"nm0005690\" \"nm0374658\" ...\n $ category  : chr  \"self\" \"director\" \"producer\" \"cinematographer\" ...\n $ job       : chr  \"\\\\N\" \"\\\\N\" \"producer\" \"director of photography\" ...\n $ characters: chr  \"[\\\"Self\\\"]\" \"\\\\N\" \"\\\\N\" \"\\\\N\" ...\n\n\n\nReplacing “N” with NA before executinf the Coercion functions\n\n\nTITLE_BASICS[TITLE_BASICS == \"N\"] &lt;- NA \nTITLE_EPISODES[TITLE_EPISODES == \"N\"] &lt;- NA \nTITLE_RATINGS[TITLE_RATINGS == \"N\"] &lt;- NA \nTITLE_CREW[TITLE_CREW == \"N\"] &lt;- NA \nTITLE_PRINCIPALS[TITLE_PRINCIPALS == \"N\"] &lt;- NA\n\nhead (TITLE_BASICS)\n\n     tconst titleType           primaryTitle          originalTitle isAdult\n1 tt0000001     short             Carmencita             Carmencita       0\n2 tt0000002     short Le clown et ses chiens Le clown et ses chiens       0\n3 tt0000003     short           Poor Pierrot         Pauvre Pierrot       0\n4 tt0000004     short            Un bon bock            Un bon bock       0\n5 tt0000005     short       Blacksmith Scene       Blacksmith Scene       0\n6 tt0000006     short      Chinese Opium Den      Chinese Opium Den       0\n  startYear endYear runtimeMinutes                   genres\n1      1894     \\\\N              1        Documentary,Short\n2      1892     \\\\N              5          Animation,Short\n3      1892     \\\\N              5 Animation,Comedy,Romance\n4      1892     \\\\N             12          Animation,Short\n5      1893     \\\\N              1             Comedy,Short\n6      1894     \\\\N              1                    Short\n\n\nC: Using a combination of mutate and the coercion functions as.numeric and as.logical.\n\nTITLE_BASICS &lt;- TITLE_BASICS |&gt; mutate(isAdult = as.logical(isAdult), startYear = as.numeric(startYear), endYear = as.numeric(endYear), runtimeMinutes = as.numeric(runtimeMinutes))\n\nWarning: There were 3 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `startYear = as.numeric(startYear)`.\nCaused by warning:\n! NAs introduced by coercion\nℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings.\n\nstr (TITLE_BASICS)\n\n'data.frame':   11174655 obs. of  9 variables:\n $ tconst        : chr  \"tt0000001\" \"tt0000002\" \"tt0000003\" \"tt0000004\" ...\n $ titleType     : chr  \"short\" \"short\" \"short\" \"short\" ...\n $ primaryTitle  : chr  \"Carmencita\" \"Le clown et ses chiens\" \"Poor Pierrot\" \"Un bon bock\" ...\n $ originalTitle : chr  \"Carmencita\" \"Le clown et ses chiens\" \"Pauvre Pierrot\" \"Un bon bock\" ...\n $ isAdult       : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ startYear     : num  1894 1892 1892 1892 1893 ...\n $ endYear       : num  NA NA NA NA NA NA NA NA NA NA ...\n $ runtimeMinutes: num  1 5 5 12 1 1 1 1 45 1 ...\n $ genres        : chr  \"Documentary,Short\" \"Animation,Short\" \"Animation,Comedy,Romance\" \"Animation,Short\" ...\n\nTITLE_EPISODES &lt;- TITLE_EPISODES |&gt; mutate(seasonNumber = as.numeric(seasonNumber), episodeNumber = as.numeric(episodeNumber))\n\nWarning: There were 2 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `seasonNumber = as.numeric(seasonNumber)`.\nCaused by warning:\n! NAs introduced by coercion\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\nstr (TITLE_EPISODES)\n\n'data.frame':   8579083 obs. of  4 variables:\n $ tconst       : chr  \"tt0031458\" \"tt0041951\" \"tt0042816\" \"tt0042889\" ...\n $ parentTconst : chr  \"tt32857063\" \"tt0041038\" \"tt0989125\" \"tt0989125\" ...\n $ seasonNumber : num  NA 1 1 NA 3 2 2 3 1 2 ...\n $ episodeNumber: num  NA 9 17 NA 42 16 8 3 6 16 ...\n\nglimpse(NAME_BASICS) \n\nRows: 13,884,604\nColumns: 6\n$ nconst            &lt;chr&gt; \"nm0000001\", \"nm0000002\", \"nm0000003\", \"nm0000004\", …\n$ primaryName       &lt;chr&gt; \"Fred Astaire\", \"Lauren Bacall\", \"Brigitte Bardot\", …\n$ birthYear         &lt;dbl&gt; 1899, 1924, 1934, 1949, 1918, 1915, 1899, 1924, 1925…\n$ deathYear         &lt;dbl&gt; 1987, 2014, NA, 1982, 2007, 1982, 1957, 2004, 1984, …\n$ primaryProfession &lt;chr&gt; \"actor,miscellaneous,producer\", \"actress,soundtrack,…\n$ knownForTitles    &lt;chr&gt; \"tt0072308,tt0050419,tt0053137,tt0027125\", \"tt003738…\n\ninstall.packages(\"tidyr\") \n\nInstalling package into 'C:/Users/krisf/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'tidyr' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\krisf\\AppData\\Local\\Temp\\RtmpWQw1EN\\downloaded_packages\n\nlibrary(tidyr)\n\nNAME_BASICS |&gt; separate_longer_delim(knownForTitles, \",\") |&gt; slice_head(n=10)\n\n      nconst     primaryName birthYear deathYear\n1  nm0000001    Fred Astaire      1899      1987\n2  nm0000001    Fred Astaire      1899      1987\n3  nm0000001    Fred Astaire      1899      1987\n4  nm0000001    Fred Astaire      1899      1987\n5  nm0000002   Lauren Bacall      1924      2014\n6  nm0000002   Lauren Bacall      1924      2014\n7  nm0000002   Lauren Bacall      1924      2014\n8  nm0000002   Lauren Bacall      1924      2014\n9  nm0000003 Brigitte Bardot      1934        NA\n10 nm0000003 Brigitte Bardot      1934        NA\n                    primaryProfession knownForTitles\n1        actor,miscellaneous,producer      tt0072308\n2        actor,miscellaneous,producer      tt0050419\n3        actor,miscellaneous,producer      tt0053137\n4        actor,miscellaneous,producer      tt0027125\n5  actress,soundtrack,archive_footage      tt0037382\n6  actress,soundtrack,archive_footage      tt0075213\n7  actress,soundtrack,archive_footage      tt0117057\n8  actress,soundtrack,archive_footage      tt0038355\n9   actress,music_department,producer      tt0057345\n10  actress,music_department,producer      tt0049189"
  },
  {
    "objectID": "mp02.html#task-2-instructor-provided-questions",
    "href": "mp02.html#task-2-instructor-provided-questions",
    "title": "Mini project 02",
    "section": "Task 2: Instructor provided questions",
    "text": "Task 2: Instructor provided questions\n\nHow many movies are in our data set? How many TV series? How many TV episodes?\n\nWith the following code you will fin the count for all the Types availables in the dataset in descendent order:\n\nTITLE_BASICS|&gt; count (titleType)|&gt;arrange(desc(n))\n\n      titleType       n\n1     tvEpisode 8579083\n2         short 1023102\n3         movie  694834\n4         video  299504\n5      tvSeries  271690\n6       tvMovie  148593\n7  tvMiniSeries   57396\n8     tvSpecial   49811\n9     videoGame   40203\n10      tvShort   10438\n11      tvPilot       1\n\n\nMovies = 132,320 TV Series= 30,013 TV Episodes = 156,860\nNow, we’re filtering to get the count for the 3 specific types requested:\n\nfiltered_data &lt;- TITLE_BASICS |&gt; filter(titleType %in% c(\"movie\", \"tvSeries\", \"tvEpisode\"))\n\nfiltered_data |&gt; ggplot(aes(x = titleType)) + geom_bar() + xlab(\"Title Types\") + ylab(\"Number of Titles\") + ggtitle(\"Number of Types per Titles\") + theme_bw() + scale_x_discrete() + scale_y_continuous(labels = scales::comma)\n\n\n\n\n\n\n\n\n2.Who is the oldest living person in our data set?\nFor this question, we will analyze two different scenarios.\nScenario 1: We’ll calculate the Äge, assuming that NA is a missing value, so we’re excluding those rows.\n\nNAME_BASICS &lt;- NAME_BASICS |&gt; mutate(age = ifelse(!is.na(deathYear) & !is.na(birthYear), deathYear - birthYear, NA)) |&gt;arrange(desc(10))\n\nThen, we’ll arrange by the oldest person by age,having the year of death.\nUnder this analysis, the oldest person alive was: Jeanne Louis Calment, who died at 122 years old.\n\nNAME_BASICS |&gt; arrange(desc(age)) |&gt; select(primaryName, birthYear, deathYear, age) |&gt; head() |&gt; print()\n\n            primaryName birthYear deathYear  age\n1          Rosita Royce         9      1954 1945\n2 Jeanne Louise Calment      1875      1997  122\n3       Tatzumbia Dupea      1849      1970  121\n4             Kabir Das      1398      1518  120\n5             Sankardev      1449      1568  119\n6        Durgabai Kamat      1879      1997  118\n\n\nScenario 2: Assuming that the NA values on year of death are missing because the person is still alive, then we’ll use the following code to calculate the age.\n\ncurrent_year &lt;- 2024 \n\nNAME_BASICS |&gt; \n  mutate(age = ifelse(!is.na(deathYear), deathYear - birthYear, current_year - birthYear)) |&gt; \n  arrange(desc(age)) |&gt; \n  select(primaryName, birthYear, deathYear, age) |&gt; \n  head() |&gt; \n  print()\n\n        primaryName birthYear deathYear  age\n1      Danial Shaki        18        NA 2006\n2      Rosita Royce         9      1954 1945\n3         Donatello      1386        NA  638\n4         Meera Bai      1498        NA  526\n5    Hans Neusidler      1508        NA  516\n6 Ivan the Terrible      1530        NA  494\n\n\nAs we can see, under this scenario, we can’t take the results as possible answers, because it’s impossible that a person can live for 399 years.\n3.There is one TV Episode in this data set with a perfect 10/10 rating and at least 200,000 IMDb ratings. What is it? What series does it belong to?\nWith the following code we will filter by the tittle with a 10/10 ranking and equal or more than 200,00 votes: We knot that the title ID number is: “tt2301451”, now we need to identify the title name on the table “TABLE_BASICS”.\n\nTITLE_RATINGS |&gt; arrange(desc(averageRating)) |&gt; filter(numVotes &gt;= 200000) |&gt; select(tconst, averageRating, numVotes) |&gt; head() |&gt; print()\n\n     tconst averageRating numVotes\n1 tt2301451          10.0   230087\n2 tt4283088           9.9   232830\n3 tt0903747           9.5  2220756\n4 tt0185906           9.4   542837\n5 tt0795176           9.4   222817\n6 tt0111161           9.3  2953131\n\nTITLE_BASICS |&gt; filter (tconst == \"tt2301451\")|&gt; select (tconst, titleType, primaryTitle)\n\n     tconst titleType primaryTitle\n1 tt2301451 tvEpisode   Ozymandias\n\nTITLE_EPISODES |&gt; filter (tconst == \"tt2301451\")|&gt; select (tconst, seasonNumber, episodeNumber)\n\n     tconst seasonNumber episodeNumber\n1 tt2301451            5            14\n\n\nThe TV Episode with the perfect ranking and 230,087 votes is the episode number 14, of season 5 from the TV Series called “Ozymandias”.\n4.What four projects is the actor Mark Hamill most known for?\n\nNAME_BASICS |&gt; filter (primaryName == \"Mark Hamill\")|&gt; select (primaryName, knownForTitles)\n\n  primaryName                          knownForTitles\n1 Mark Hamill tt0076759,tt2527336,tt0080684,tt0086190\n2 Mark Hamill                              tt12402330\n3 Mark Hamill                               tt0389413\n4 Mark Hamill                               tt1008054\n5 Mark Hamill                               tt1694520\n6 Mark Hamill                               tt0202206\n\nlibrary(dplyr)\n\nTITLE_BASICS |&gt; filter(tconst %in% c(\"tt0076759\", \"tt2527336\", \"tt0080684\", \"tt0086190\")) |&gt; select(tconst, titleType, primaryTitle) |&gt; print()\n\n     tconst titleType                                   primaryTitle\n1 tt0076759     movie             Star Wars: Episode IV - A New Hope\n2 tt0080684     movie Star Wars: Episode V - The Empire Strikes Back\n3 tt0086190     movie     Star Wars: Episode VI - Return of the Jedi\n4 tt2527336     movie        Star Wars: Episode VIII - The Last Jedi\n\n\nThe actor Mark Hamill is most known for the Star Wars movies, these are the primary titles:\n5.What TV series, with more than 12 episodes, has the highest average rating?\n\nepisode_ratings &lt;- TITLE_EPISODES |&gt; inner_join(TITLE_RATINGS, by = \"tconst\") |&gt; inner_join(TITLE_BASICS, by = c(\"parentTconst\" = \"tconst\"))\n\n# Count episodes per series and filter for series with more than 12 episodes\n\n\ntop_rated_series &lt;- episode_ratings |&gt; \n  group_by(parentTconst, primaryTitle) |&gt; \n  summarise(avg_rating = mean(averageRating, na.rm = TRUE), \n            num_episodes = n(), \n            .groups = \"drop\") |&gt; \n  filter(num_episodes &gt; 12) |&gt; \n  arrange(desc(avg_rating)) |&gt; \n  head(1)\n\n\nmessage &lt;- sprintf(\n  \"TV series with the highest average rating is '%s' with an average rating of %.2f across %d episodes.\",\n  top_rated_series$primaryTitle,\n  top_rated_series$avg_rating,\n  top_rated_series$num_episodes\n)\nprint(message)\n\n[1] \"TV series with the highest average rating is 'Kavya - Ek Jazbaa, Ek Junoon' with an average rating of 9.75 across 113 episodes.\"\n\n\n6.The TV series Happy Days (1974-1984) gives us the common idiom “jump the shark”. The phrase comes from a controversial fifth season episode (aired in 1977) in which a lead character literally jumped over a shark on water skis. Idiomatically, it is used to refer to the moment when a once-great show becomes ridiculous and rapidly looses quality.\nIs it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?\nR= Yes, it’s true that the later episodes have a lower average rating.\n\nhappy_days &lt;- TITLE_BASICS |&gt; filter(primaryTitle == \"Happy Days\")\n\nhappy_days_ratings &lt;- TITLE_EPISODES |&gt; filter(parentTconst %in% happy_days$tconst) |&gt; inner_join(TITLE_RATINGS, by = \"tconst\") |&gt; group_by(seasonNumber) |&gt; summarise(avg_rating = mean(averageRating, na.rm = TRUE)) |&gt; arrange(seasonNumber)\n\nprint(happy_days_ratings)\n\n# A tibble: 11 × 2\n   seasonNumber avg_rating\n          &lt;dbl&gt;      &lt;dbl&gt;\n 1            1       7.58\n 2            2       7.69\n 3            3       7.7 \n 4            4       7.43\n 5            5       7   \n 6            6       7.02\n 7            7       6.33\n 8            8       5.3 \n 9            9       6.4 \n10           10       6.7 \n11           11       7.33"
  },
  {
    "objectID": "mp02.html#task-3-customs-success-metric",
    "href": "mp02.html#task-3-customs-success-metric",
    "title": "Mini project 02",
    "section": "Task 3: Customs Success Metric",
    "text": "Task 3: Customs Success Metric\nDesigning a metric for IMDb entries, which reflects the quality and popular awareness. Our success metric will utilize the “log” function for “numVotes” variable, the function will help to balance the large vote counts and will give more veracity to the results.\nThe following is the code for the success metric:\n\nTITLE_RATINGS |&gt; mutate(successMetric = averageRating * log(numVotes)) |&gt; select(successMetric, averageRating, numVotes, tconst) |&gt; head(10)\n\n   successMetric averageRating numVotes    tconst\n1       43.59238           5.7     2096 tt0000001\n2       31.61450           5.6      283 tt0000002\n3       49.73537           6.5     2104 tt0000003\n4       28.13123           5.4      183 tt0000004\n5       49.30185           6.2     2841 tt0000005\n6       26.41602           5.0      197 tt0000006\n7       36.66653           5.4      889 tt0000007\n8       41.66408           5.4     2243 tt0000008\n9       29.02650           5.4      216 tt0000009\n10      60.88036           6.8     7731 tt0000010\n\n\nTime to validate the success metric:\n\nIn the following code, we’ll choose the top 10 movies and confirm that they were indeed box offices successes.\n\n\ninner_join(TITLE_RATINGS, TITLE_BASICS, join_by(tconst == tconst)) |&gt; mutate(successMetric = averageRating * log(numVotes)) |&gt; filter(titleType == \"movie\") |&gt; select(successMetric, titleType, tconst,primaryTitle, averageRating, numVotes) |&gt; arrange(desc(successMetric)) |&gt; head(10)\n\n   successMetric titleType    tconst\n1       138.5549     movie tt0111161\n2       134.0282     movie tt0468569\n3       133.7460     movie tt0068646\n4       130.6753     movie tt0167260\n5       130.2461     movie tt0110912\n6       129.9997     movie tt1375666\n7       129.3531     movie tt0120737\n8       129.2261     movie tt0137523\n9       128.9469     movie tt0109830\n10      127.8768     movie tt0108052\n                                        primaryTitle averageRating numVotes\n1                           The Shawshank Redemption           9.3  2953131\n2                                    The Dark Knight           9.0  2934441\n3                                      The Godfather           9.2  2058741\n4      The Lord of the Rings: The Return of the King           9.0  2021764\n5                                       Pulp Fiction           8.9  2267965\n6                                          Inception           8.8  2604356\n7  The Lord of the Rings: The Fellowship of the Ring           8.9  2051454\n8                                         Fight Club           8.8  2385191\n9                                       Forrest Gump           8.8  2310684\n10                                  Schindler's List           9.0  1481448\n\n\nIn the code above, we’re analyzing the information with the success metric that we created,now we’ll make a comparative by analyzing only the average rating:\n\ninner_join(TITLE_RATINGS, TITLE_BASICS, join_by(tconst == tconst)) |&gt; mutate(successMetric = averageRating * log(numVotes)) |&gt; filter(titleType == \"movie\") |&gt; select(successMetric, titleType, tconst,primaryTitle, averageRating, numVotes) |&gt; arrange(desc(averageRating)) |&gt; head(10)\n\n   successMetric titleType     tconst        primaryTitle averageRating\n1       61.13682     movie tt27815015             Kurukku          10.0\n2       69.32448     movie tt33075815              Kaveri          10.0\n3       47.44932     movie tt33507675     Gorgeous Rascal          10.0\n4       54.66246     movie  tt0389937   Don: Plain & Tall           9.9\n5       47.80031     movie tt13088688  Happy Hacker's Day           9.9\n6       68.31723     movie tt14142772        Kaalapatthar           9.9\n7       53.35181     movie tt27843025         Dollarspete           9.9\n8       46.80114     movie tt28999528                Aima           9.9\n9       46.53476     movie tt30790410            Peppatty           9.9\n10      76.05201     movie tt33477418 Like Aani Subscribe           9.9\n   numVotes\n1       452\n2      1025\n3       115\n4       250\n5       125\n6       993\n7       219\n8       113\n9       110\n10     2169\n\n\nNow, let’s discuss the results. Sorting by the average rating doesn’t feel reliable because even though those movies are rated with a 10, the number of votes is too low. In contrast, the results obtained with the success metric show a higher number of votes, which is directly proportional to both the rating and the success metric points.\n\nChoose 3-5 movies with large numbers of IMDb votes that score poorly on your success metric and confirm that they are indeed of low quality.\n\nFor this analysis, first I want to know the mean, max and min of my three variables, in my code I’m filtering for number of votes above 15,000 and success metric under the average.\n\nTITLE_RATINGS |&gt; mutate(successMetric = averageRating * log(numVotes)) |&gt; select(successMetric, averageRating, numVotes, tconst) |&gt; head(10)\n\n   successMetric averageRating numVotes    tconst\n1       43.59238           5.7     2096 tt0000001\n2       31.61450           5.6      283 tt0000002\n3       49.73537           6.5     2104 tt0000003\n4       28.13123           5.4      183 tt0000004\n5       49.30185           6.2     2841 tt0000005\n6       26.41602           5.0      197 tt0000006\n7       36.66653           5.4      889 tt0000007\n8       41.66408           5.4     2243 tt0000008\n9       29.02650           5.4      216 tt0000009\n10      60.88036           6.8     7731 tt0000010\n\nTITLE_RATINGS |&gt; summarise(min_averageRating = mean(averageRating, na.rm = TRUE))\n\n  min_averageRating\n1          6.801623\n\nTITLE_RATINGS |&gt; summarise(mean_numVotesg = mean(numVotes, na.rn = TRUE))\n\n  mean_numVotesg\n1       4020.515\n\nTITLE_RATINGS |&gt; mutate(successMetric = averageRating * log(numVotes)) |&gt; select(successMetric, averageRating, numVotes, tconst) |&gt; head(10)|&gt; summarise(mean_numSuccessMetric = mean(successMetric, is.na = TRUE))\n\n  mean_numSuccessMetric\n1              39.70288\n\nTITLE_RATINGS |&gt; mutate(successMetric = averageRating * log(numVotes)) |&gt; select(successMetric, averageRating, numVotes, tconst) |&gt; head(10)|&gt; summarise(max_numSuccessMetric = max(successMetric, is.na = TRUE))\n\n  max_numSuccessMetric\n1             60.88036\n\nTITLE_RATINGS |&gt; mutate(successMetric = averageRating * log(numVotes)) |&gt; select(successMetric, averageRating, numVotes, tconst) |&gt; head(10)|&gt; summarise(min_numSuccessMetric = min(successMetric, na.rm = TRUE))\n\n  min_numSuccessMetric\n1             26.41602\n\ninner_join(TITLE_RATINGS, TITLE_BASICS, join_by(tconst == tconst)) |&gt; mutate(successMetric = averageRating * log(numVotes)) |&gt; filter(titleType == \"movie\", numVotes &gt; 15000, successMetric &lt; 42) |&gt; select(successMetric, titleType, tconst, primaryTitle, averageRating, numVotes) |&gt; head(10)\n\n   successMetric titleType    tconst                     primaryTitle\n1       41.42717     movie tt0052077          Plan 9 from Outer Space\n2       16.86419     movie tt0060666         Manos: The Hands of Fate\n3       32.65982     movie tt0065832             Hercules in New York\n4       39.04952     movie tt0076009         Exorcist II: The Heretic\n5       39.99278     movie tt0085750                         Jaws 3-D\n6       32.49702     movie tt0093300                Jaws: The Revenge\n7       40.30001     movie tt0094074 Superman IV: The Quest for Peace\n8       36.94279     movie tt0094824                    Caddyshack II\n9       30.84751     movie tt0103923                  Captain America\n10      31.41177     movie tt0105643                          Troll 2\n   averageRating numVotes\n1            3.9    41042\n2            1.6    37802\n3            3.3    19869\n4            3.8    29033\n5            3.7    49457\n6            3.0    50632\n7            3.7    53739\n8            3.8    16677\n9            3.2    15365\n10           3.0    35263\n\n\nAs we can see in the results, all the movies where the success metric is below average have a low average rating as well. Even though the number of votes is high, we demonstrate again that the success metric works.\n\nChoose a prestige actor or director and confirm that they have many projects with high scores on your success metric. The chosen director is Woody Allen, who has been awarded 4 Oscars, 2 Golden Globes, 9 BAFTA nominations, and many more nominations throughout his career.\n\n\nNAME_BASICS |&gt; filter (primaryName == \"Woody Allen\") #We use this filter to get the project IDs\n\n      nconst primaryName birthYear deathYear     primaryProfession\n1  nm0000095 Woody Allen      1935        NA writer,director,actor\n2 nm14402329 Woody Allen        NA        NA                   \\\\N\n                           knownForTitles age\n1 tt0079522,tt0075686,tt0118954,tt0091167  NA\n2                               tt0283172  NA\n\ninner_join(TITLE_RATINGS, TITLE_BASICS, join_by(tconst == tconst)) |&gt; mutate(successMetric = averageRating * log(numVotes)) |&gt; filter(titleType == \"movie\", tconst %in% c(\"tt0079522\",\"tt0075686\",\"tt0118954\",\"tt0091167\")) |&gt; select(successMetric, titleType, tconst, primaryTitle, averageRating, numVotes)\n\n  successMetric titleType    tconst           primaryTitle averageRating\n1     100.36862     movie tt0075686             Annie Hall           8.0\n2      92.92100     movie tt0079522              Manhattan           7.8\n3      87.83728     movie tt0091167 Hannah and Her Sisters           7.8\n4      78.75088     movie tt0118954   Deconstructing Harry           7.3\n  numVotes\n1   280991\n2   149186\n3    77745\n4    48426\n\n\nPer the results, his movies exceed the average success metric. However, the average rating is not great. It’s important to highlight that we chose this actor based on his awards, but those awarded movies are not in this database. This can be considered missing data, and consequently, these results are not very reliable.\n\nPerform at least one other form of ‘spot check’ validation.\n\nWe’ll create a scatter plot to visualize the relationship between the Success Metric and the Number of Votes per movie.\n\nlibrary(ggplot2)\n\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt; \n  mutate(successMetric = averageRating * log(numVotes)) \n\n\nggplot(inner_join(TITLE_RATINGS, TITLE_BASICS, join_by(tconst == tconst)) , \n       aes(x = numVotes, y = successMetric)) + \n  geom_point() + \n  labs(title = \"Success Metric vs. Number of Votes\", \n       x = \"Number of Votes\", \n       y = \"Success Metric\") + \n  scale_x_continuous(labels = label_number(accuracy = 0.1)) + \n  theme_minimal()\n\n\n\n\n\n\n\n\nThe results of this plot confirm that the relationship between the number of votes and the success metric is not necessarily close. We must remember that we used the “log” function to precisely avoid distorting the calculations by the count of votes. We can also observe that the largest concentration of the highest ratings is between 0 and 1 million votes.An interesting observation would be to know which two movies have the highest ratings and the highest number of votes, in this plot.\n\nCome up with a numerical threshold for a project to be a ‘success’; that is, determine a value such that movies above are all “solid” or better.\n\nI will use Percentiles to calculate the numerical threshold. The reason I choose this method is because i think it’s important to focus on the successMetric value where most of the data is locates. Given that our data contains extreme values, using the Percentiles helps to prevent skewing the numeric threshold. In contrast, the mean can be significantly influenced by these extreme values.\n\nmean(TITLE_RATINGS$successMetric, na.rm = TRUE)\n\n[1] 42.2355\n\nmin(TITLE_RATINGS$successMetric, na.rm = TRUE)\n\n[1] 4.60517\n\nmax(TITLE_RATINGS$successMetric, na.rm = TRUE)\n\n[1] 138.8269\n\n\nCalculate percentiles\n\npercentiles &lt;- quantile(TITLE_RATINGS$successMetric, probs = c(0.25, 0.75), na.rm = TRUE); print(percentiles)\n\n     25%      75% \n33.79023 49.02554 \n\n\nThe results indicate that 75% of the success metric scores are 49 or lower, and 25% of the scores are 33 or lower. Consequently, I will set 50 as the numeric threshold to project a successful or solid project."
  },
  {
    "objectID": "mp02.html#putting-it-together",
    "href": "mp02.html#putting-it-together",
    "title": "Mini project 02",
    "section": "Putting It Together",
    "text": "Putting It Together"
  },
  {
    "objectID": "docs/index.html",
    "href": "docs/index.html",
    "title": "Enjoy the ride. Welcome to my Portafolio.",
    "section": "",
    "text": "Good day, dear reader. My name is Cristel Zuniga, but you can call me Kassandra, which is my second and favorite name. I am currently pursuing a master’s degree in Business Analytics at Baruch College, part of CUNY in New York City, with an expected graduation date of January 2026.\nI have five years of experience in Supply Chain Management, with a focus over the past two years on data analysis in the supply side. One of my future goals is to build my own company as a business consultant, where we can work together to grow your business and compete with top companies.\nPlease contact me at: 1234 - 123 - 456 or: kzuniga"
  }
]